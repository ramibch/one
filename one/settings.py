"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# 0. Setup
from copy import copy
from datetime import datetime
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _
from environs import Env
from redis import ConnectionPool as RedisConnectionPool

BASE_DIR = Path(__file__).resolve().parent.parent

env = Env()
env.read_env()
now = datetime.now()


SECRET_KEY = env("SECRET_KEY", "some-tests-need-a-secret-key")

# Enviornments
ENV = env("ENV")
ENVS = (DEV, PROD) = "dev", "prod"

if ENV not in ENVS:
    raise ImproperlyConfigured(f"ENV '{ENV}' is not a valid enviorment.")


DEBUG = env.bool("DEBUG")
HTTPS = env.bool("HTTPS")
STATIC_HOST = env("STATIC_HOST", "")

REDIS_URL = env("REDIS_URL")
REDIS_CONNECTION_POOL = RedisConnectionPool.from_url(url=REDIS_URL)


"""
##################
1. Django settings
##################
"""

ALLOWED_HOSTS = [h for h in env.list("ALLOWED_HOSTS", delimiter=";") if h != ""]


INTERNAL_IPS = ["127.0.0.1"]

INSTALLED_APPS = [
    # Project apps
    "one.base",
    "one.landing",
    "one.clients",
    "one.articles",
    "one.menus",
    "one.tex",
    "one.users",
    "one.plans",
    "one.tools",
    "one.faqs",
    "one.sites",
    "one.products",
    "one.geo",
    "one.quiz",
    "one.dgt",
    "one.emails",
    "one.etsy",
    "one.companies",
    "one.candidates",
    # Third-party apps
    "django_cleanup.apps.CleanupConfig",
    "django_extensions",
    "markdownify.apps.MarkdownifyConfig",
    "modeltranslation",
    "huey.contrib.djhuey",
    "rosetta",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.linkedin_oauth2",
    "geoip2",
    "djmoney",
    "dbbackup",
    "corsheaders",
    "rest_framework",
    "django_browser_reload",
    "import_export",
    "bx_django_utils",  # needed from huey_monitor
    "huey_monitor",
    "debug_toolbar",
    "csp",
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "django.contrib.gis",
    "django.db.migrations",
    "django.contrib.admindocs",
]

MIDDLEWARE = [
    "one.base.middleware.ip.IpAddressMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "csp.middleware.CSPMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
    "one.base.middleware.one.OneMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "one.urls"

TEMPLATES = [
    {
        "NAME": "dj",
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "one" / "_templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "one.menus.context_processors.menu_items",
            ],
            "debug": DEBUG,
        },
    },
    {
        "NAME": "tex",
        "BACKEND": "one.tex.backend.TeXEngine",
        "DIRS": [BASE_DIR / "one" / "_templates_tex"],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "one.tex.environment.environment",
        },
    },
]

WSGI_APPLICATION = "one.wsgi.application"

ASGI_APPLICATION = "one.asgi.application"

# Database
DB_SUPERUSER = env("POSTGRES_SUPERUSER")
DB_SUPERPASSWORD = env("POSTGRES_SUPERPASSWORD")
DB_NAME = env("POSTGRES_DB")
DB_USER = env("POSTGRES_USER")
DB_PASSWORD = env("POSTGRES_PASSWORD")
DB_HOST = env("POSTGRES_HOST")
DB_PORT = env("POSTGRES_PORT")

DATABASES = {
    "default": {
        # "ENGINE": "django.db.backends.postgresql",
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "TEST": {"NAME": "test_db"},
    }
}

# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication
AUTH_USER_MODEL = "users.User"

# Internationalization
LANGUAGE_CODE = "en"  # default language

TIME_ZONE = "Europe/Zurich"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("de", _("German")),
    ("es", _("Spanish")),
    ("fr", _("French")),
    ("it", _("Italian")),
    ("nl", _("Dutch")),
    ("pt", _("Portuguese")),
]


lang_input = ["es", "de"]

langs_out = [("en", _("English")), ("de", _("German"))]  # output desired


LANGUAGE_CODES = [items[0] for items in LANGUAGES]
LANGUAGE_CODES_WITHOUT_DEFAULT = copy(LANGUAGE_CODES)
LANGUAGE_CODES_WITHOUT_DEFAULT.remove(LANGUAGE_CODE)

LOCALE_PATHS = [BASE_DIR / "locale"]


# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# A list of trusted origins for unsafe requests (e.g. POST).
# https://docs.djangoproject.com/en/5.1/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS = [
    # TODO: Add here h
]


# Superuser without input

DJANGO_SUPERUSER_USERNAME = env("DJANGO_SUPERUSER_USERNAME")
DJANGO_SUPERUSER_PASSWORD = env("DJANGO_SUPERUSER_PASSWORD")
DJANGO_SUPERUSER_EMAIL = env("DJANGO_SUPERUSER_EMAIL")

# Caching
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
    }
}

# Append slash
APPEND_SLASH = False

# Uploads

DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000


# Errors and Admins

SERVER_EMAIL = env("SERVER_EMAIL")

ADMINS = [
    ("Rami Boutassghount", "ramiboutas@protonmail.com"),
]


"""
####################
Third-party settings
####################
"""

# huey
HUEY_IMMEDIATE = env.bool("HUEY_IMMEDIATE")

HUEY = {
    "huey_class": "huey.RedisHuey",  # Huey implementation to use.
    "name": DATABASES["default"]["NAME"],  # Use db name for huey.
    "results": True,  # Store return values of tasks.
    "store_none": False,  # If a task returns None, do not save to results.
    "immediate": HUEY_IMMEDIATE,  # run synchronously.
    "utc": True,  # Use UTC for all times internally.
    "blocking": True,  # Perform blocking pop rather than poll Redis.
    "connection": {"connection_pool": REDIS_CONNECTION_POOL},
    "consumer": {
        "workers": 4,
        "worker_type": "thread",
        "initial_delay": 0.1,  # Smallest polling interval, same as -d.
        "backoff": 1.15,  # Exponential backoff using this rate, -b.
        "max_delay": 10.0,  # Max possible polling interval, -m.
        "scheduler_interval": 1,  # Check schedule every second, -s.
        "periodic": True,  # Enable crontab feature.
        "check_worker_health": True,  # Enable worker health checks.
        "health_check_interval": 5,  # Check worker health every second.
    },
}

# cors

CORS_ALLOWED_ORIGINS = []


# geoip2
GEOIP_PATH = BASE_DIR / "geoip2dbs"

# Google maps
GOOGLE_MAPS_API_KEY = env("GOOGLE_MAPS_API_KEY")


# django-markdownify
# https://django-markdownify.readthedocs.io/en/latest/settings.html


MARKDOWNIFY = {
    "default": {
        "WHITELIST_ATTRS": ["href", "src", "alt", "class"],
        "WHITELIST_TAGS": [
            "a",
            "abbr",
            "acronym",
            "b",
            "blockquote",
            "em",
            "i",
            "li",
            "ol",
            "p",
            "strong",
            "ul",
            "img",
            "span",
            "div",
            "pre",
            "code",
        ],
        "MARKDOWN_EXTENSIONS": [
            "markdown.extensions.codehilite",
            "markdown.extensions.extra",
            "markdown.extensions.footnotes",
            "markdown.extensions.tables",
        ],
        "MARKDOWN_EXTENSION_CONFIGS": {
            "markdown.extensions.codehilite": {
                "css_class": "codehilite",
                "linenums": False,
            },
        },
    },
    "simple_text": {
        "WHITELIST_TAGS": ["li", "ol", "strong", "i", "br"],
    },
    "text_and_headings": {
        "WHITELIST_TAGS": ["h2", "h3", "h4", "h5", "li", "ol", "strong", "i", "br"],
    },
}

# Email
EMAIL_BACKEND = env("EMAIL_BACKEND")
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_PORT = env("EMAIL_PORT")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")

# Postal
POSTAL_SIGNATURE_KID = env("POSTAL_SIGNATURE_KID")


## Translations

# DeepL
DEEPL_AUTH_KEY = env("DEEPL_AUTH_KEY")


# Rosetta
# https://django-rosetta.readthedocs.io/settings.html
ROSETTA_MESSAGES_PER_PAGE = 50
ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True
ROSETTA_WSGI_AUTO_RELOAD = True

# modeltranslation
MODELTRANSLATION_DEBUG = DEBUG

# django-allauth

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

ACCOUNT_FORMS = {
    "signup": "one.users.forms.CustomSignupForm",
}


ACCOUNT_LOGOUT_REDIRECT = "/"
ACCOUNT_SESSION_REMEMBER = True

ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]

ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_URL = "account_login"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


SOCIALACCOUNT_PROVIDERS = {
    # https://django-allauth.readthedocs.io/en/latest/providers.html#google
    "google": {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        "APP": {
            "client_id": env("SOCIALACCOUNT_GOOGLE_CLIENT_ID"),
            "secret": env("SOCIALACCOUNT_GOOGLE_SECRET_KEY"),
            "key": "",
        }
    },
    "linkedin_oauth2": {
        "APP": {
            "client_id": env("SOCIALACCOUNT_LINKEDIN_CLIENT_ID"),
            "secret": env("SOCIALACCOUNT_LINKEDIN_SECRET_KEY"),
            "key": "",
        },
        "SCOPE": ["r_liteprofile", "r_emailaddress", "w_member_social"],
        "PROFILE_FIELDS": [
            "id",
            "first-name",
            "last-name",
            "email-address",
            "picture-url",
            "public-profile-url",
            "openid",
        ],
    },
}


# Stripe

STRIPE_PUBLIC_KEY = env("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET")

# Linkedin posts
# TODO: change this! Use Site model to store these keys.
LINKEDIN_AUTHOR_TPYE = "organization"  # "organization" or "person"
LINKEDIN_AUTHOR_ID = ""
LINKEDIN_ACCESS_TOKEN = ""
LINKEDIN_REFRESH_TOKEN = ""


"""
################
Project settings
################
"""

MAIN_WEBSITE_URL = "https://ramib.ch"

# https
if HTTPS:
    # https in production
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_HSTS_SECONDS = 31_536_000  # 31536000 # usual: 31536000 (1 year)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_PRELOAD = True


# One secret key
ONE_SECRET_KEY = env("ONE_SECRET_KEY")

# cache clear
CLEAR_CACHE_IN_DEV = True


# Tex
# TODO: check if it is posible to pass an arg. to run tex without this setting.

LATEX_GRAPHICSPATH = []


# Submodules
SUBMODULES_PATH = BASE_DIR / "submodules"


# Telegram
# 1. Use BotFather to get API KEY: https://telegram.me/BotFather
# 2. (Admin): Write something to Bot in Telegram
# 3. Read the updates: one.base.utils.telegram.Bot.get_updates

TELEGRAM_BOT_API_KEY = env("TELEGRAM_BOT_API_KEY")
TELEGRAM_ADMIN_CHAT_ID = env("TELEGRAM_ADMIN_CHAT_ID", "1777934566")


# Media and static files (S3)
AWS_S3_ACCESS_KEY_ID = env("AWS_S3_ACCESS_KEY_ID")
AWS_S3_SECRET_ACCESS_KEY = env("AWS_S3_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = env("AWS_S3_ENDPOINT_URL")

S3_BASE_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"
MEDIA_URL = S3_BASE_URL + "media/"
STATIC_URL = S3_BASE_URL + "static/"

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = STATIC_HOST + "/static/"

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "gzip": False,
            "default_acl": "public-read",
            "location": "media",
            "querystring_auth": False,
        },
    },
    "private": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "gzip": False,
            "default_acl": "private",
            "location": "private",
            "querystring_auth": True,
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
    # "staticfiles": {
    #     "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    #     "OPTIONS": {
    #         "gzip": True,
    #         "default_acl": "public-read",
    #         "querystring_auth": False,
    #     },
    # },
}

# DB backups
# https://django-dbbackup.readthedocs.io/en/stable/storage.html#amazon-s3
DBBACKUP_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
DBBACKUP_STORAGE_OPTIONS = {
    "access_key": AWS_S3_ACCESS_KEY_ID,
    "secret_key": AWS_S3_SECRET_ACCESS_KEY,
    "bucket_name": AWS_STORAGE_BUCKET_NAME,
    "location": f"db_backups/{now.year}/{now.month}/",
    "default_acl": "private",
}
