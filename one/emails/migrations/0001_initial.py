# Generated by Django 5.2 on 2025-06-15 18:44

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
import one.emails.models
import storages.backends.s3
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("base", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="PostalDomainDNSError",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("domain", models.CharField(max_length=128, null=True)),
                ("uuid", models.CharField(max_length=128, null=True)),
                ("dns_checked_at", models.FloatField(default=0.0)),
                ("spf_status", models.CharField(max_length=128, null=True)),
                ("spf_error", models.CharField(max_length=256, null=True)),
                ("dkim_status", models.CharField(max_length=128, null=True)),
                ("dkim_error", models.CharField(max_length=256, null=True)),
                ("mx_status", models.CharField(max_length=128, null=True)),
                ("mx_error", models.CharField(max_length=256, null=True)),
                ("return_path_status", models.CharField(max_length=128, null=True)),
                ("return_path_error", models.CharField(max_length=256, null=True)),
            ],
            options={
                "verbose_name": "Postal: Domain DNS Error",
                "verbose_name_plural": "Postal: Domain DNS Errors",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PostalMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("message_id", models.PositiveBigIntegerField(null=True)),
                ("status", models.CharField(max_length=128, null=True)),
                ("details", models.CharField(max_length=512, null=True)),
                ("output", models.CharField(max_length=512, null=True)),
                ("time", models.FloatField(default=0.0, null=True)),
                ("sent_with_ssl", models.BooleanField(default=False, null=True)),
                ("timestamp", models.FloatField(null=True)),
                ("token", models.CharField(max_length=128, null=True)),
                ("direction", models.CharField(max_length=128, null=True)),
                ("large_id", models.CharField(max_length=128, null=True)),
                ("mail_from", models.EmailField(max_length=254)),
                ("mail_to", models.EmailField(max_length=254)),
                ("subject", models.CharField(max_length=256, null=True)),
                ("spam_status", models.CharField(max_length=128, null=True)),
                ("tag", models.CharField(max_length=128, null=True)),
                ("delayed", models.BooleanField(default=False, null=True)),
                ("held", models.BooleanField(default=False, null=True)),
                ("delivery_failed", models.BooleanField(default=False, null=True)),
                ("received_at", models.DateTimeField(null=True)),
                ("message_dict", models.JSONField(null=True)),
            ],
            options={
                "verbose_name": "Postal: Message",
                "verbose_name_plural": "Postal: Messages",
                "ordering": ("-received_at",),
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PostalMessageLinkClicked",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Postal: MessageLinkClicked",
                "verbose_name_plural": "Postal: MessageLinkClicked",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PostalMessageLoaded",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Postal: Message Loaded",
                "verbose_name_plural": "Postal: Messages Loaded",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Sender",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64)),
                ("address", models.EmailField(max_length=64, unique=True)),
                ("domain_validation", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ReplyMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("body", models.TextField()),
                ("replied", models.BooleanField(default=False)),
                ("draft", models.BooleanField(default=False)),
                (
                    "replied_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        storage=storages.backends.s3.S3Storage(
                            default_acl="private",
                            gzip=False,
                            location="private",
                            querystring_auth=True,
                        ),
                        upload_to=one.emails.models.ReplyMessage.get_file_path,
                    ),
                ),
                (
                    "contact_message",
                    auto_prefetch.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.contactmessage",
                    ),
                ),
                (
                    "postal_message",
                    auto_prefetch.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="emails.postalmessage",
                    ),
                ),
                (
                    "sender",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="emails.sender",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TemplateMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("subject", models.CharField(max_length=128)),
                ("reply_to", models.EmailField(blank=True, max_length=64, null=True)),
                ("cc", models.EmailField(blank=True, max_length=64, null=True)),
                ("body", models.TextField()),
                ("remarks", models.TextField(blank=True, null=True)),
                (
                    "is_periodic",
                    models.BooleanField(
                        default=False,
                        help_text="Email message will be send periodically.",
                    ),
                ),
                (
                    "interval",
                    models.DurationField(
                        blank=True,
                        help_text="Set when email message is periodic. Min: 8:00:00",
                        null=True,
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set when email message is periodic.",
                        null=True,
                    ),
                ),
                (
                    "stop_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set when email message is periodic.",
                        null=True,
                    ),
                ),
                (
                    "sender",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="emails.sender",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TemplateAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        storage=storages.backends.s3.S3Storage(
                            default_acl="private",
                            gzip=False,
                            location="private",
                            querystring_auth=True,
                        ),
                        upload_to=one.emails.models.TemplateAttachment.get_upload_path,
                    ),
                ),
                (
                    "email",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="emails.templatemessage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TemplateRecipientFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        storage=storages.backends.s3.S3Storage(
                            default_acl="private",
                            gzip=False,
                            location="private",
                            querystring_auth=True,
                        ),
                        upload_to="emails/recipients-files/",
                    ),
                ),
                ("processed", models.BooleanField(default=False)),
                ("process_on_save", models.BooleanField(default=True)),
                (
                    "email",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="emails.templatemessage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TemplateRecipient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "send_times",
                    models.PositiveSmallIntegerField(default=0, editable=False),
                ),
                (
                    "sent_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                ("to_address", models.EmailField(max_length=128)),
                ("var_1", models.CharField(blank=True, max_length=64, null=True)),
                ("var_2", models.CharField(blank=True, max_length=64, null=True)),
                ("var_3", models.CharField(blank=True, max_length=64, null=True)),
                ("draft", models.BooleanField(default=False)),
                ("remarks", models.TextField(blank=True, null=True)),
                (
                    "email",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="emails.templatemessage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
                "unique_together": {("email", "to_address")},
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
