# Generated by Django 5.2 on 2025-04-26 12:04

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
import one.db
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("base", "0002_initial"),
        # ("links", "0001_initial"),
        ("sites", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="LandingPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="", max_length=64)),
                ("title_en", models.CharField(default="", max_length=64, null=True)),
                ("title_de", models.CharField(default="", max_length=64, null=True)),
                ("title_es", models.CharField(default="", max_length=64, null=True)),
                ("title_fr", models.CharField(default="", max_length=64, null=True)),
                ("title_it", models.CharField(default="", max_length=64, null=True)),
                ("title_nl", models.CharField(default="", max_length=64, null=True)),
                ("title_pt", models.CharField(default="", max_length=64, null=True)),
                ("slug", models.SlugField(blank=True, null=True)),
                ("slug_en", models.SlugField(blank=True, null=True)),
                ("slug_de", models.SlugField(blank=True, null=True)),
                ("slug_es", models.SlugField(blank=True, null=True)),
                ("slug_fr", models.SlugField(blank=True, null=True)),
                ("slug_it", models.SlugField(blank=True, null=True)),
                ("slug_nl", models.SlugField(blank=True, null=True)),
                ("slug_pt", models.SlugField(blank=True, null=True)),
                ("is_home", models.BooleanField(db_default=True, default=True)),
                (
                    "benefits_title",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "site",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="sites.site"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HeroSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("headline", models.TextField(max_length=256)),
                ("headline_en", models.TextField(max_length=256, null=True)),
                ("headline_de", models.TextField(max_length=256, null=True)),
                ("headline_es", models.TextField(max_length=256, null=True)),
                ("headline_fr", models.TextField(max_length=256, null=True)),
                ("headline_it", models.TextField(max_length=256, null=True)),
                ("headline_nl", models.TextField(max_length=256, null=True)),
                ("headline_pt", models.TextField(max_length=256, null=True)),
                ("subheadline", models.TextField(max_length=256)),
                ("subheadline_en", models.TextField(max_length=256, null=True)),
                ("subheadline_de", models.TextField(max_length=256, null=True)),
                ("subheadline_es", models.TextField(max_length=256, null=True)),
                ("subheadline_fr", models.TextField(max_length=256, null=True)),
                ("subheadline_it", models.TextField(max_length=256, null=True)),
                ("subheadline_nl", models.TextField(max_length=256, null=True)),
                ("subheadline_pt", models.TextField(max_length=256, null=True)),
                ("image", models.ImageField(upload_to="homepages/hero/")),
                ("cta_title", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "cta_title_en",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_de",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_es",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_fr",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_it",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_nl",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_pt",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("cta_new_tab", models.BooleanField(default=False)),
                (
                    "cta_animation",
                    auto_prefetch.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="base.animation",
                    ),
                ),
                (
                    "cta_link",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="base.link",
                    ),
                ),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FinalCTASection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField(max_length=256)),
                ("title_en", models.TextField(max_length=256, null=True)),
                ("title_de", models.TextField(max_length=256, null=True)),
                ("title_es", models.TextField(max_length=256, null=True)),
                ("title_fr", models.TextField(max_length=256, null=True)),
                ("title_it", models.TextField(max_length=256, null=True)),
                ("title_nl", models.TextField(max_length=256, null=True)),
                ("title_pt", models.TextField(max_length=256, null=True)),
                ("description", models.TextField()),
                ("description_en", models.TextField(null=True)),
                ("description_de", models.TextField(null=True)),
                ("description_es", models.TextField(null=True)),
                ("description_fr", models.TextField(null=True)),
                ("description_it", models.TextField(null=True)),
                ("description_nl", models.TextField(null=True)),
                ("description_pt", models.TextField(null=True)),
                ("cta_title", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "cta_title_en",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_de",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_es",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_fr",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_it",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_nl",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "cta_title_pt",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("cta_new_tab", models.BooleanField(default=False)),
                (
                    "cta_link",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="base.link",
                    ),
                ),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FAQsSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("title_en", models.CharField(max_length=128, null=True)),
                ("title_de", models.CharField(max_length=128, null=True)),
                ("title_es", models.CharField(max_length=128, null=True)),
                ("title_fr", models.CharField(max_length=128, null=True)),
                ("title_it", models.CharField(max_length=128, null=True)),
                ("title_nl", models.CharField(max_length=128, null=True)),
                ("title_pt", models.CharField(max_length=128, null=True)),
                (
                    "categories",
                    one.db.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("plans", "Plans"),
                                ("products", "Products"),
                                ("info", "Informative"),
                                ("accounts", "Accounts"),
                                ("legal", "Legal concerns"),
                            ],
                            max_length=32,
                        ),
                        size=None,
                    ),
                ),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "FAQs Section",
                "verbose_name_plural": "FAQs Sections",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="BenefitItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("emoji", models.CharField(db_default="🚀", max_length=8)),
                ("name", models.CharField(max_length=32)),
                ("name_en", models.CharField(max_length=32, null=True)),
                ("name_de", models.CharField(max_length=32, null=True)),
                ("name_es", models.CharField(max_length=32, null=True)),
                ("name_fr", models.CharField(max_length=32, null=True)),
                ("name_it", models.CharField(max_length=32, null=True)),
                ("name_nl", models.CharField(max_length=32, null=True)),
                ("name_pt", models.CharField(max_length=32, null=True)),
                ("description", models.TextField()),
                ("description_en", models.TextField(null=True)),
                ("description_de", models.TextField(null=True)),
                ("description_es", models.TextField(null=True)),
                ("description_fr", models.TextField(null=True)),
                ("description_it", models.TextField(null=True)),
                ("description_nl", models.TextField(null=True)),
                ("description_pt", models.TextField(null=True)),
                (
                    "landing",
                    auto_prefetch.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ArticlesSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("emoji", models.CharField(db_default="📝", max_length=8)),
                ("title", models.CharField(max_length=64)),
                ("title_en", models.CharField(max_length=64, null=True)),
                ("title_de", models.CharField(max_length=64, null=True)),
                ("title_es", models.CharField(max_length=64, null=True)),
                ("title_fr", models.CharField(max_length=64, null=True)),
                ("title_it", models.CharField(max_length=64, null=True)),
                ("title_nl", models.CharField(max_length=64, null=True)),
                ("title_pt", models.CharField(max_length=64, null=True)),
                ("number_of_articles", models.PositiveSmallIntegerField(default=6)),
                ("show_all_link", models.BooleanField(db_default=True)),
                ("show_created_on", models.BooleanField(db_default=True)),
                (
                    "card_animation",
                    auto_prefetch.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="base.animation",
                    ),
                ),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Articles Section",
                "verbose_name_plural": "Articles Sections",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ProblemSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("title_en", models.CharField(max_length=128, null=True)),
                ("title_de", models.CharField(max_length=128, null=True)),
                ("title_es", models.CharField(max_length=128, null=True)),
                ("title_fr", models.CharField(max_length=128, null=True)),
                ("title_it", models.CharField(max_length=128, null=True)),
                ("title_nl", models.CharField(max_length=128, null=True)),
                ("title_pt", models.CharField(max_length=128, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list"
                    ),
                ),
                (
                    "description_en",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_de",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_es",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_fr",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_it",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_nl",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                (
                    "description_pt",
                    models.TextField(
                        help_text="Reflect here the problem of the user. Use bullet list",
                        null=True,
                    ),
                ),
                ("emoji", models.CharField(db_default="⚠️", max_length=8)),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SolutionSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("title_en", models.CharField(max_length=128, null=True)),
                ("title_de", models.CharField(max_length=128, null=True)),
                ("title_es", models.CharField(max_length=128, null=True)),
                ("title_fr", models.CharField(max_length=128, null=True)),
                ("title_it", models.CharField(max_length=128, null=True)),
                ("title_nl", models.CharField(max_length=128, null=True)),
                ("title_pt", models.CharField(max_length=128, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="Introduce our product/service as the solution."
                    ),
                ),
                (
                    "description_en",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_de",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_es",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_fr",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_it",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_nl",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                (
                    "description_pt",
                    models.TextField(
                        help_text="Introduce our product/service as the solution.",
                        null=True,
                    ),
                ),
                ("emoji", models.CharField(db_default="💡", max_length=8)),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StepActionSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("title_en", models.CharField(max_length=128, null=True)),
                ("title_de", models.CharField(max_length=128, null=True)),
                ("title_es", models.CharField(max_length=128, null=True)),
                ("title_fr", models.CharField(max_length=128, null=True)),
                ("title_it", models.CharField(max_length=128, null=True)),
                ("title_nl", models.CharField(max_length=128, null=True)),
                ("title_pt", models.CharField(max_length=128, null=True)),
                ("description", models.TextField()),
                ("description_en", models.TextField(null=True)),
                ("description_de", models.TextField(null=True)),
                ("description_es", models.TextField(null=True)),
                ("description_fr", models.TextField(null=True)),
                ("description_it", models.TextField(null=True)),
                ("description_nl", models.TextField(null=True)),
                ("description_pt", models.TextField(null=True)),
                (
                    "landing",
                    auto_prefetch.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="landing.landingpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
