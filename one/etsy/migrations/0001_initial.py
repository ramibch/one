# Generated by Django 5.2 on 2025-04-26 09:29

import auto_prefetch
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import one.base.utils.db
import one.etsy.models
import storages.backends.s3
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="App",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32)),
                (
                    "keystring",
                    models.CharField(
                        help_text="An Etsy App API Key keystring for the app.",
                        max_length=256,
                        unique=True,
                    ),
                ),
                (
                    "redirect_uri",
                    models.URLField(
                        default="https://ramib.ch/etsy/callback",
                        help_text="A callback URL your app uses to receive the authorization code",
                    ),
                ),
                (
                    "scopes",
                    one.base.utils.db.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "address_r",
                                    "address_r: see billing and shipping addresses",
                                ),
                                (
                                    "address_w",
                                    "address_w: update billing and shipping addresses",
                                ),
                                (
                                    "billing_r",
                                    "billing_r: see all billing statement data",
                                ),
                                ("cart_r", "cart_r: read shopping carts"),
                                ("cart_w", "cart_w: add/remove from shopping carts"),
                                ("email_r", "email_r: read a user profile"),
                                ("favorites_r", "favorites_r: see private favorites"),
                                ("favorites_w", "favorites_w: add/remove favorites"),
                                (
                                    "feedback_r",
                                    "feedback_r: see purchase info in feedback",
                                ),
                                ("listings_d", "listings_d: delete listings"),
                                ("listings_r", "listings_r: see all listings "),
                                ("listings_w", "listings_w: create/edit listings"),
                                ("profile_r", "profile_r: see all profile data"),
                                (
                                    "profile_w",
                                    "profile_w: update user profile, avatar, etc.",
                                ),
                                (
                                    "recommend_r",
                                    "recommend_r: see recommended listings",
                                ),
                                (
                                    "recommend_w",
                                    "recommend_w: accept/reject recommended listings",
                                ),
                                ("shops_r", "shops_r: see private shop info"),
                                ("shops_w", "shops_w: update shop"),
                                (
                                    "transactions_r",
                                    "transactions_r: see all payment data",
                                ),
                                ("transactions_w", "transactions_w: update receipts"),
                            ],
                            max_length=16,
                        ),
                        default=one.etsy.models.get_default_scopes,
                        help_text="The scopes your application requires to use specific endpoints",
                        size=None,
                    ),
                ),
                ("is_commercial", models.BooleanField(default=False, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Listing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveSmallIntegerField(
                        default=999,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999),
                        ],
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("price", models.FloatField()),
                (
                    "who_made",
                    models.CharField(
                        choices=[
                            ("i_did", "I did"),
                            ("someone_else", "Someone else"),
                            ("collective", "Collective"),
                        ],
                        default="i_did",
                        max_length=32,
                    ),
                ),
                (
                    "when_made",
                    models.CharField(
                        choices=[
                            ("made_to_order", "Made to order"),
                            ("2020_2025", "2020 - 2025"),
                            ("2010_2019", "2010 - 2019"),
                            ("2006_2009", "2006 - 2009"),
                            ("before_2006", "Before 2006"),
                        ],
                        default="2020_2025",
                        max_length=32,
                    ),
                ),
                ("taxonomy_id", models.PositiveIntegerField(default=2078)),
                ("shop_section_id", models.PositiveIntegerField(blank=True, null=True)),
                ("tags", models.TextField(null=True)),
                (
                    "is_personalizable",
                    models.BooleanField(
                        default=False,
                        help_text="This listing is personalizable or not.",
                    ),
                ),
                (
                    "personalization_is_required",
                    models.BooleanField(
                        blank=True,
                        help_text="Listing requires personalization or not. Will only change if is_personalizable is 'true'.",
                        null=True,
                    ),
                ),
                (
                    "personalization_char_count_max",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="It represents the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.",
                        null=True,
                    ),
                ),
                (
                    "personalization_instructions",
                    models.TextField(
                        blank=True,
                        help_text="It represents  instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.",
                        null=True,
                    ),
                ),
                (
                    "is_customizable",
                    models.BooleanField(
                        blank=True,
                        help_text="When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.",
                        null=True,
                    ),
                ),
                (
                    "should_auto_renew",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Renews or not a listing for four months upon expiration.",
                        null=True,
                    ),
                ),
                (
                    "is_taxable",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Tax rates apply or not to this listing at checkout.",
                        null=True,
                    ),
                ),
                (
                    "listing_type",
                    models.CharField(
                        choices=[
                            ("physical", "Physical"),
                            ("download", "Download"),
                            ("both", "Both"),
                        ],
                        default="download",
                        help_text="An enumerated type string that indicates whether the listing is physical or a digital download.",
                        max_length=32,
                    ),
                ),
                (
                    "is_supply",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.",
                        null=True,
                    ),
                ),
                ("listing_id", models.PositiveBigIntegerField(null=True)),
                ("state", models.CharField(max_length=32, null=True)),
                ("creation_timestamp", models.PositiveBigIntegerField(null=True)),
                ("created_timestamp", models.PositiveBigIntegerField(null=True)),
                ("ending_timestamp", models.PositiveBigIntegerField(null=True)),
                (
                    "original_creation_timestamp",
                    models.PositiveBigIntegerField(null=True),
                ),
                ("last_modified_timestamp", models.PositiveBigIntegerField(null=True)),
                ("updated_timestamp", models.PositiveBigIntegerField(null=True)),
                ("state_timestamp", models.PositiveBigIntegerField(null=True)),
                ("featured_rank", models.IntegerField(null=True)),
                ("url", models.URLField(null=True)),
                ("num_favorers", models.PositiveIntegerField(null=True)),
                ("non_taxable", models.BooleanField(null=True)),
                ("is_private", models.BooleanField(null=True)),
                ("language", models.CharField(max_length=32, null=True)),
                ("etsy_dict", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ListingFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        storage=storages.backends.s3.S3Storage(
                            default_acl="private",
                            gzip=False,
                            location="private",
                            querystring_auth=True,
                        ),
                        upload_to=one.etsy.models.get_file_path,
                    ),
                ),
                ("rank", models.PositiveSmallIntegerField(default=1)),
                ("listing_file_id", models.PositiveBigIntegerField(null=True)),
                ("filename", models.CharField(max_length=256, null=True)),
                ("filesize", models.CharField(max_length=256, null=True)),
                ("size_bytes", models.PositiveBigIntegerField(null=True)),
                ("filetype", models.CharField(max_length=128, null=True)),
                ("create_timestamp", models.PositiveBigIntegerField(null=True)),
                ("created_timestamp", models.PositiveBigIntegerField(null=True)),
                ("etsy_dict", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ListingImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.ImageField(
                        storage=storages.backends.s3.S3Storage(
                            default_acl="private",
                            gzip=False,
                            location="private",
                            querystring_auth=True,
                        ),
                        upload_to=one.etsy.models.get_file_path,
                    ),
                ),
                ("rank", models.PositiveSmallIntegerField(default=1)),
                ("overwrite", models.BooleanField(default=False, null=True)),
                ("is_watermarked", models.BooleanField(default=False, null=True)),
                ("alt_text", models.CharField(max_length=250, null=True)),
                ("listing_image_id", models.PositiveBigIntegerField(null=True)),
                ("hex_code", models.TextField(null=True)),
                ("red", models.PositiveSmallIntegerField(null=True)),
                ("green", models.PositiveSmallIntegerField(null=True)),
                ("blue", models.PositiveSmallIntegerField(null=True)),
                ("hue", models.PositiveSmallIntegerField(null=True)),
                ("saturation", models.PositiveSmallIntegerField(null=True)),
                ("brightness", models.PositiveSmallIntegerField(null=True)),
                ("is_black_and_white", models.BooleanField(default=False, null=True)),
                ("creation_tsz", models.PositiveBigIntegerField(null=True)),
                ("created_timestamp", models.PositiveBigIntegerField(null=True)),
                ("url_75x75", models.URLField(max_length=512, null=True)),
                ("url_170x135", models.URLField(max_length=512, null=True)),
                ("url_570xN", models.URLField(max_length=512, null=True)),
                ("url_fullxfull", models.URLField(max_length=512, null=True)),
                ("full_height", models.PositiveIntegerField(null=True)),
                ("full_width", models.PositiveIntegerField(null=True)),
                ("etsy_dict", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Shop",
            fields=[
                (
                    "shop_id",
                    models.PositiveBigIntegerField(primary_key=True, serialize=False),
                ),
                ("shop_name", models.CharField(max_length=128)),
                ("user_id", models.PositiveBigIntegerField()),
                ("create_date", models.PositiveBigIntegerField(null=True)),
                ("created_timestamp", models.PositiveBigIntegerField(null=True)),
                ("title", models.CharField(max_length=256)),
                ("announcement", models.CharField(max_length=256, null=True)),
                ("currency_code", models.CharField(max_length=8)),
                ("is_vacation", models.BooleanField(default=False)),
                ("vacation_message", models.CharField(max_length=512, null=True)),
                ("sale_message", models.CharField(max_length=512, null=True)),
                ("digital_sale_message", models.CharField(max_length=512, null=True)),
                ("update_date", models.PositiveBigIntegerField(null=True)),
                ("updated_timestamp", models.PositiveBigIntegerField(null=True)),
                ("listing_active_count", models.PositiveIntegerField(null=True)),
                ("digital_listing_count", models.PositiveIntegerField(null=True)),
                ("login_name", models.CharField(max_length=256, null=True)),
                ("accepts_custom_requests", models.BooleanField(null=True)),
                ("vacation_autoreply", models.CharField(max_length=512, null=True)),
                ("url", models.URLField(max_length=256, null=True)),
                ("image_url_760x100", models.URLField(max_length=512, null=True)),
                ("num_favorers", models.PositiveIntegerField(null=True)),
                (
                    "languages",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=16),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                ("icon_url_fullxfull", models.URLField(max_length=512, null=True)),
                ("is_using_structured_policies", models.BooleanField(null=True)),
                ("has_onboarded_structured_policies", models.BooleanField(null=True)),
                ("include_dispute_form_link", models.BooleanField(null=True)),
                ("is_direct_checkout_onboarded", models.BooleanField(null=True)),
                ("is_etsy_payments_onboarded", models.BooleanField(null=True)),
                ("is_opted_in_to_buyer_promise", models.BooleanField(null=True)),
                ("is_calculated_eligible", models.BooleanField(null=True)),
                ("is_shop_us_based", models.BooleanField(null=True)),
                ("transaction_sold_count", models.PositiveBigIntegerField(null=True)),
                ("shipping_from_country_iso", models.CharField(null=True)),
                ("shop_location_country_iso", models.CharField(null=True)),
                ("policy_welcome", models.TextField(null=True)),
                ("policy_payment", models.TextField(null=True)),
                ("policy_shipping", models.TextField(null=True)),
                ("policy_refunds", models.TextField(null=True)),
                ("policy_additional", models.TextField(null=True)),
                ("policy_seller_info", models.TextField(null=True)),
                ("policy_update_date", models.PositiveBigIntegerField(null=True)),
                ("policy_has_private_receipt_info", models.BooleanField(null=True)),
                ("has_unstructured_policies", models.BooleanField(null=True)),
                ("policy_privacy", models.TextField(null=True)),
                ("review_average", models.FloatField(null=True)),
                ("review_count", models.PositiveIntegerField(null=True)),
                ("etsy_dict", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="EtsyAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("etsy_user_id", models.PositiveBigIntegerField(null=True)),
                ("shop_id", models.PositiveBigIntegerField(null=True)),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="A state string, similar to a strong password, which protects against Cross-site request forgery exploits.",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "code_verifier",
                    models.CharField(
                        blank=True,
                        help_text="A code verifier for code exchange (PKCE)",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="An OAuth authorization code required to request an OAuth token",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "scopes",
                    one.base.utils.db.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "address_r",
                                    "address_r: see billing and shipping addresses",
                                ),
                                (
                                    "address_w",
                                    "address_w: update billing and shipping addresses",
                                ),
                                (
                                    "billing_r",
                                    "billing_r: see all billing statement data",
                                ),
                                ("cart_r", "cart_r: read shopping carts"),
                                ("cart_w", "cart_w: add/remove from shopping carts"),
                                ("email_r", "email_r: read a user profile"),
                                ("favorites_r", "favorites_r: see private favorites"),
                                ("favorites_w", "favorites_w: add/remove favorites"),
                                (
                                    "feedback_r",
                                    "feedback_r: see purchase info in feedback",
                                ),
                                ("listings_d", "listings_d: delete listings"),
                                ("listings_r", "listings_r: see all listings "),
                                ("listings_w", "listings_w: create/edit listings"),
                                ("profile_r", "profile_r: see all profile data"),
                                (
                                    "profile_w",
                                    "profile_w: update user profile, avatar, etc.",
                                ),
                                (
                                    "recommend_r",
                                    "recommend_r: see recommended listings",
                                ),
                                (
                                    "recommend_w",
                                    "recommend_w: accept/reject recommended listings",
                                ),
                                ("shops_r", "shops_r: see private shop info"),
                                ("shops_w", "shops_w: update shop"),
                                (
                                    "transactions_r",
                                    "transactions_r: see all payment data",
                                ),
                                ("transactions_w", "transactions_w: update receipts"),
                            ],
                            max_length=16,
                        ),
                        default=one.etsy.models.get_default_scopes,
                        help_text="The scopes your application requires to use specific endpoints",
                        size=None,
                    ),
                ),
                (
                    "access_token",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "refresh_token",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "app",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="etsy.app",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
